@startuml
title
    <img:../assets/logo.svg{scale=0.2}>

    Terminal Calypso Crypto Legacy SAM API 1.0.+ (2023-06-16)
end title

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60
!define C_THROW 2C3E50

' -- Styles that don't work with new version of plantuml --
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' -- END --

skinparam ClassBorderThickness 2
skinparam ArrowThickness 2

' Yellow
skinparam ClassBackgroundColor #FEFECE
skinparam ClassBorderColor #D4AC0D
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

legend top
    __Colors legend__ :
    ** <color:grey>**Work in progress...**</color>
    * __External public API references__ :
    ** <back:yellow>**Calypsonet Terminal Reader API**</back>
    ** <back:pink>**Calypsonet Terminal Calypso Card API**</back>
end legend

package "calypso.crypto.legacysam" as legacysam {

+class "**final** LegacySamApiProperties" as ApiProperties <<green>> {
    +{static} **final** String VERSION
}
+interface "<color:blue>LegacySamApiFactory" as LegacySamApiFactory <<blue>> {
    +<color:blue>LegacySamSelectionExtension createLegacySamSelectionExtension ()

    +<color:blue>LegacySamSecuritySetting createLegacySamSecuritySetting ()

    +<color:blue>LSFreeTransactionManager createLSFreeTransactionManager (<back:yellow>CardReader</back> samReader, LegacySam sam)
    +<color:grey>LSSecureReadTransactionManager createLSSecureReadTransactionManager (<back:yellow>CardReader</back> samReader, LegacySam sam, LegacySamSecuritySetting securitySetting)
    +<color:grey>LSSecureWriteTransactionManager createLSSecureWriteTransactionManager (<back:yellow>CardReader</back> samReader, LegacySam sam, LegacySamSecuritySetting securitySetting)
    +<color:blue>LSAsyncTransactionCreatorManager createLSAsyncTransactionCreatorManager (String targetSamContext, LegacySamSecuritySetting securitySetting)
    +<color:blue>LSAsyncTransactionExecutorManager createLSAsyncTransactionExecutorManager (<back:yellow>CardReader</back> samReader, LegacySam sam, String samCommands)

    +<color:blue>LSCardTransactionCryptoExtension createCardTransactionCryptoExtension ()

    +<color:blue>BasicSignatureComputationData createBasicSignatureComputationData ()
    +<color:blue>TraceableSignatureComputationData createTraceableSignatureComputationData ()
    +<color:blue>BasicSignatureVerificationData createBasicSignatureVerificationData ()
    +<color:blue>TraceableSignatureVerificationData createTraceableSignatureVerificationData ()
}
package "transaction" as transaction {
    +interface LSTransactionManager<T extends LSTransactionManager<T>> {
        +T processCommands ()
    }
    +interface LSReadTransactionManager<T extends LSReadTransactionManager<T>> extends LSTransactionManager {
        +<color:grey>T prepareReadSamParameters ()

        +<color:grey>T prepareReadCaadRecord (int caadRecordNumber)
        +<color:grey>T prepareReadCaadRecords (int fromCaadRecordNumber, int toCaadRecordNumber)

        +T prepareReadSystemKeyParameters (SystemKeyType systemKeyType)

        +<color:grey>T prepareReadWorkKeyParameter (int workKeyRecordNumber)
        +<color:grey>T prepareReadWorkKeyParameters (int fromWorkKeyRecordNumber, int toWorkKeyRecordNumber)

        +<color:grey>T prepareReadWorkKeyParameter (byte workKeyKif, byte workKeyKvc)

        +T prepareReadCounterStatus (int counterNumber)
        +T prepareReadAllCountersStatus ()
    }
    +interface LSWriteTransactionManager<T extends LSWriteTransactionManager<T>> extends LSTransactionManager {
        +<color:grey>T prepareWriteSamParameters (byte[] parameters)
        +<color:grey>T prepareWriteCaadRecord (int caadRecordNumber, byte[] caad)

        +<color:grey>T prepareLoadSystemKey (SystemKeyType sourceSystemKeyType, byte sourceSystemKeyKif, byte sourceSystemKeyKvc)
        +<color:grey>T prepareLoadWorkKey (byte sourceWorkKeyKif, byte sourceWorkKeyKvc, byte[] workKeyParameters, byte cipheringSystemKeyKvc)

        +T prepareWriteCounterCeiling (int counterNumber, int ceilingValue)
        +<color:blue>T prepareWriteCounterConfiguration (int counterNumber, int ceilingValue, CounterIncrementAccess counterIncrementAccess)
    }
    +enum "<color:blue>CounterIncrementAccess" as CounterIncrementAccess <<green>> {
        <color:blue>FREE_COUNTING_ENABLED
        <color:blue>FREE_COUNTING_DISABLED
    }
    +interface LSSecureReadTransactionManager <<blue>> extends LSReadTransactionManager {
    }
    +interface LSFreeTransactionManager <<blue>> extends LSReadTransactionManager {
        +<color:grey>LSFreeTransactionManager prepareLoadPlainWorkKey (byte workKeyKif, byte workKeyKvc, byte[] workKeyParameters, byte[] workKeyValue)
        +<color:grey>LSFreeTransactionManager prepareGenerateWorkKey (byte workKeyKif, byte workKeyKvc, byte[] workKeyParameters)

        +LSFreeTransactionManager prepareComputeSignature (SignatureComputationData<?> data)
        +LSFreeTransactionManager prepareVerifySignature (SignatureVerificationData<?> data)

        +String exportTargetSamContextForAsyncTransaction ()
    }
    +interface "<color:grey>LSSecureWriteTransactionManager" as LSSecureWriteTransactionManager <<blue>> extends LSWriteTransactionManager {
        +<color:grey>LSSecureWriteTransactionManager prepareLoadPlainWorkKey (byte sourceWorkKeyKif, byte sourceWorkKeyKvc, byte[] workKeyParameters)
    }
    +interface LSAsyncTransactionCreatorManager <<blue>> extends LSWriteTransactionManager {
        +String exportCommands ()
    }
    +interface LSAsyncTransactionExecutorManager <<blue>> extends LSTransactionManager {
    }

    +interface LegacySamSecuritySetting <<blue>> {
        +LegacySamSecuritySetting setControlSamResource (<back:yellow>CardReader</back> samReader, LegacySam sam)
    }
    +interface "<<<back:pink>CardTransactionCryptoExtension</back>>>\n<color:blue>LSCardTransactionCryptoExtension" as LSCardTransactionCryptoExtension <<blue>> {
        +<color:blue>LSCardTransactionCryptoExtension prepareComputeSignature (SignatureComputationData<?> data)
        +<color:blue>LSCardTransactionCryptoExtension prepareVerifySignature (SignatureVerificationData<?> data)
    }

    +interface "<color:blue>SignatureComputationData" as SignatureComputationData<T extends SignatureComputationData<T>> {
        +T setData (byte[] data, byte kif, byte kvc)
        +T setSignatureSize (int size)
        +T setKeyDiversifier (byte[] diversifier)

        +byte[] getSignature ()
    }
    +interface BasicSignatureComputationData <<blue>> extends SignatureComputationData {
    }
    +interface TraceableSignatureComputationData <<blue>> extends SignatureComputationData {
        +TraceableSignatureComputationData withSamTraceabilityMode (int offset, SamTraceabilityMode samTraceabilityMode)
        +TraceableSignatureComputationData withoutBusyMode ()

        +byte[] getSignedData ()
    }
    +enum "<color:blue>SamTraceabilityMode" as SamTraceabilityMode <<green>> {
        <color:blue>FULL_SERIAL_NUMBER
        <color:blue>TRUNCATED_SERIAL_NUMBER
    }
    +interface "<color:blue>SignatureVerificationData" as SignatureVerificationData<T extends SignatureVerificationData<T>> {
        +T setData (byte[] data, byte[] signature, byte kif, byte kvc)
        +T setKeyDiversifier (byte[] diversifier)

        +boolean isSignatureValid ()
    }
    +interface BasicSignatureVerificationData <<blue>> extends SignatureVerificationData {
    }
    +interface TraceableSignatureVerificationData <<blue>> extends SignatureVerificationData {
        +TraceableSignatureVerificationData withSamTraceabilityMode (int offset, SamTraceabilityMode samTraceabilityMode, LegacySamRevocationServiceSpi samRevocationService)
        +TraceableSignatureVerificationData withoutBusyMode ()
    }

    ' Exceptions
    +class "<<RuntimeException>>" as RuntimeException <<green>> {
        +**SamRevokedException**
        +**InconsistentDataException**: Number of R-APDUs != number of C-APDUs
        +**InvalidSignatureException**
        +**UnexpectedCommandStatusException**
        +**ReaderIOException**: SAM reader communication is broken.
        +**SamIOException**
    }
}
+enum SystemKeyType <<green>> {
    PERSONALIZATION
    KEY_MANAGEMENT
    RELOADING
    AUTHENTICATION
}
package "sam" as sam {
    +interface "<<<back:yellow>CardSelectionExtension</back>>>\n<color:blue>LegacySamSelectionExtension" as LegacySamSelectionExtension <<blue>> {
        +LegacySamSelectionExtension filterByProductType (LegacySam.ProductType productType)
        +LegacySamSelectionExtension filterBySerialNumber (String serialNumberRegex)

        +LegacySamSelectionExtension setUnlockData (String unlockData)

        +<color:grey>LegacySamSelectionExtension prepareReadSamParameters ()

        +<color:grey>LegacySamSelectionExtension prepareReadCaadRecord (int caadRecordNumber)
        +<color:grey>LegacySamSelectionExtension prepareReadCaadRecords (int fromCaadRecordNumber, int toCaadRecordNumber)

        +<color:blue>LegacySamSelectionExtension prepareReadSystemKeyParameters (SystemKeyType systemKeyType)

        +<color:grey>LegacySamSelectionExtension prepareReadWorkKeyParameter (int workKeyRecordNumber)
        +<color:grey>LegacySamSelectionExtension prepareReadWorkKeyParameters (int fromWorkKeyRecordNumber, int toWorkKeyRecordNumber)

        +<color:grey>LegacySamSelectionExtension prepareReadWorkKeyParameter (byte workKeyKif, byte workKeyKvc)

        +<color:blue>LegacySamSelectionExtension prepareReadCounterStatus (int counterNumber)
        +<color:blue>LegacySamSelectionExtension prepareReadAllCountersStatus ()
    }
    +interface "<<<back:yellow>SmartCard</back>>>\nLegacySam" as LegacySam <<blue>> {
        +ProductType getProductType ()
        +String getProductInfo ()

        +byte[] getSerialNumber ()
        +byte getPlatform ()
        +byte getApplicationType ()
        +byte getApplicationSubType ()
        +byte getSoftwareIssuer ()
        +byte getSoftwareVersion ()
        +byte getSoftwareRevision ()

        +Integer getCounter (int counterNumber)
        +SortedMap<Integer, Integer> getCounters ()
        +Boolean isManualCounterIncrementAuthorized (int counterNumber)

        +Integer getCounterCeiling (int counterNumber)
        +SortedMap<Integer, Integer> getCounterCeilings ()

        +KeyParameter getSystemKeyParameter (SystemKeyType systemKeyType)
    }
    +interface KeyParameter {
        +byte getRawData ()
        +byte getKif ()
        +byte getKvc ()
        +byte getAlgorithm ()
        +byte getParameterValue (int parameterNumber)
    }
    +enum "ProductType" as SamProductType <<green>> {
        SAM_C1
        HSM_C1
        SAM_S1E1
        SAM_S1Dx
        UNKNOWN
    }
}
package "spi" as spi {
    +interface LegacySamRevocationServiceSpi <<red>> {
        +boolean isSamRevoked (byte[] serialNumber)
        +boolean isSamRevoked (byte[] serialNumber, int counterValue)
    }
}

}

' Associations

TraceableSignatureComputationData ..> SamTraceabilityMode #C_USE : use >

TraceableSignatureVerificationData ...> LegacySamRevocationServiceSpi #C_USE : use >
TraceableSignatureVerificationData ..> SamTraceabilityMode #C_USE : use >

LSFreeTransactionManager ....> SignatureComputationData #C_USE : use >
LSFreeTransactionManager ....> SignatureVerificationData #C_USE : use >

LSReadTransactionManager .up.> SystemKeyType #C_USE : use >

LSWriteTransactionManager .up.> SystemKeyType #C_USE : use >
LSWriteTransactionManager .up.> CounterIncrementAccess #C_USE : use >

LSCardTransactionCryptoExtension ..> SignatureComputationData #C_USE : use >
LSCardTransactionCryptoExtension ..> SignatureVerificationData #C_USE : use >

LegacySamSelectionExtension ..> SamProductType #C_USE : use >

LegacySam +-- SamProductType
LegacySam ..> SamProductType #C_LINK : provide >
LegacySam ..> KeyParameter #C_LINK : provide >
LegacySam .up.> SystemKeyType #C_USE : use >


' == LAYOUT ==

' SystemKeyType .[hidden]. LegacySamSelectionFactory

' == STYLE ==

package legacysam #C_GREY1 {}
package legacysam.spi #C_GREY2 {}
package legacysam.sam #C_GREY2 {}
package legacysam.transaction #C_GREY2 {}

@enduml